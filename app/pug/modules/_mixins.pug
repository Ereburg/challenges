mixin challenge(title, filterClass, challengeClass, task, tag)
  li(class=`challenges__item challenge challenge--${filterClass} challenge--${challengeClass}`)
    a(class="challenges__link" href=`${challengeClass}.html` aria-label=title+" code challenge")
      section(class="challenge__inner")
        p(class="challenge__text type")= task
        h2(class="challenge__title")= title
        ul(class="challenge__tag-list tag")
          li(class="tag__item")
            span(class="tag__badge")= tag
        p(class="challenge__text author") Ereburg
    block block
      block

mixin tag(title)
  span(class="tag__badge")= title


mixin code(title, classname)
  div(class="challenge__code code code--" + classname)
    div(class="container code-container--content")
      article(class="code__content")
        h3(class="visually-hidden")= title + " challenge"
        header(class="code__header")
          h3(class="code__title")= title
        section(class="code__body")
          h3(class="visually-hidden")= title + " challenge body"
          block block
            block
        footer(class="code__footer")
          button(class="button--code button--close close" type="button")
            span(class="close__item")
            span(class="close__item")

mixin socialButton(className, path)
  li(class="social-button__list-item"): a(class=`social-button__link social-button__link--${className}` aria-label=`${className} social media button` tabindex="0")
    span
    svg(class="icon icon--social-button"): use(xlink:href=`images/sprite.svg#sp-${path}`)
        
mixin palindrome(value1, value2)
  li: pre: code: <span class="result-color--function-name"> palindrome</span>
    .
      ("
    span(class="result-color--string")=value1 
    .
      ") 
    i(class="result-color--comments")=`//   ${value2}`


mixin method(value1, value2)
  li
    span(class="result-color--function")=value1
    span(class="result-color--comments") .prototype.
    span(class="result-color--method")=value2

mixin reverseMethod(position)
  div(class="code-method code-method--" +position data-text=`${position} method`)
    form(class="code-method__form")
      input(class="reverse__input" id="reverse__input--" +position type="text", name=`${position} method` aria-label=`Reversing a String with ${position} method` placeholder=`Type something to reverse a string with ${position} method` autocomplete="off")
      button(class="button--reverse button--reverse-"+position, type="submit") Reverse!
    ul(class="reverse__list reverse__list--"+position)

mixin palindromeMethod(position, classname)
  div(class="code-method code-method--"+classname, data-text=`${position} method`)
    form(class="code-method__form")
      input(class="code-method__input code-method__input--"+classname, id=classname+"__input--" +position, type="text", name=`${classname} ${position} method` aria-label=`Check a ${classname} with ${position} method` placeholder=`e.g. "Was it a car or a cat I saw?"` autocomplete="off")
      button(class=`code-method__button button button--neumorph button--${classname}` , type="submit") Check!
    ul(class="code-method__list code-method__list--"+position)
