extends layouts/_main

block variables
    //- put your vars here
    - var pageTitle= 'Code Challenges'

block content
    main(class="main")
         div(class="container")
            section(class="hero")
                div(class="hero__description")
                    h1(class="page__title") Code Challenges
                    p(class="hero__text") Explore various front-end coding challenges made by me and my coder friends. 
                    p(class="hero__text") The major goal is to create solutions to the most common tasks at <abbr title="JavaScript">JS</abbr> interviews. In addition, I decided to share some of personal code tasks, gists and snippets for <abbr title="HyperText Markup Language">HTML</abbr> and <abbr title="Cascading Style Sheets">CSS</abbr> that I constantly use. Also you can find there different <abbr title="Cascading Style Sheets">CSS</abbr> animations, effects and styling components.
                    p(class="hero__text") Hope you'll enjoy this stuff, let's go!

            section(class="challenges")
                h2(class="visually-hidden") Challenges List
                header(class="challenges__description")
                    ul(class="hero__list filter")
                        li(class="filter__item"): button(class="filter__button filter__button--all active" type="button") All
                        li(class="filter__item"): button(class="filter__button filter__button--javascript" type="button") JavaScript                    
                        li(class="filter__item"): button(class="filter__button filter__button--animations" type="button") <abbr title="Cascading Style Sheets">CSS Inspiration</abbr>
                ul(class="challenges__container")
                    +challenge("Reverse a String", "javascript", "str-reverse", "Task", "#JS")
                        block challengeReverse
                            +code("Reverse a String", "str-reverse")
                                block codeReverse
                                    div(class="code__info") 
                                        p(class="code__text") <strong>Reversing a string</strong> is one of the most frequently asked JavaScript question in the technical round of interview. Interviewers may ask you to write different ways to reverse a string, or they may ask you to reverse a string without using in-built methods, or they may even ask you to reverse a string using recursion.
                                        p(class="code__text") Below are my three most interesting ways to solve the problem of reversing a string in JavaScript.
                                        div(class="blockquote")
                                            p(class="code__text code__text--heading") Provided test cases:
                                            ul(class="code__content-list")
                                                li <span class="code__text-function">reverseString</span>("<b>hello</b>") should become «<b>olleh</b>»
                                                li <span class="code__text-function">reverseString</span>("<b>Howdy</b>") should become «<b>ydwoH</b>»
                                                li <span class="code__text-function">reverseString</span>("<b>Greetings from Earth</b>") should return «<b>htraE morf sgniteerG</b>»
                                        h3(class="code__text code__text--heading") 1. Reverse a String With Built-In Functions
                                        p(class="code__text") For this solution, we will use three methods: the <strong>String.prototype.split()</strong> method, the <strong>Array.prototype.reverse()</strong> method and the <strong>Array.prototype.join()</strong> method. And this looks like:
                                        pre(class="code__text blockquote"): code.
                                            <span class="code__text-function-result">function</span> <span class="code__text-function">reverseString</span>(str) {
                                                <span class="code__text-function-result">return</span> str.<span class="code__text-function">split</span>("").<span class="code__text-function">reverse</span>().<span class="code__text-function">join</span>("");
                                            }
                                            <span class="code__text-function">reverseString</span>("hello");

                                        h3(class="code__text code__text--heading") 2. Reverse a String With a Decrementing For Loop
                                        p(class="code__text") First of all we should create an empty string that will host the new created string. Then create the <strong>FOR</strong> loop. And finally return the reversed string. And this code looks like:
                                        pre(class="code__text blockquote"): code.

                                            <span class="code__text-function-result">function</span> <span class="code__text-function">reverseString</span>(str) {
                                                <span class="code__text-function">var</span> newString = "";
                                                <span class="code__text-function">for</span> (<span class="code__text-function">var</span> i = str.length - 1; i >= 0; i--) {
                                                    newString += str[i];
                                                }
                                                <span class="code__text-function-result">return</span> newString;
                                            }
                                            <span class="code__text-function">reverseString</span>("hello");

                                        h3(class="code__text code__text--heading") 3. Reverse a String With Recursion
                                        p(class="code__text") For this solution, we will use two methods: the <strong>String.prototype.substr()</strong> method and the <strong>String.prototype.charAt()</strong> method.
                                        pre(class="code__text blockquote"): code.
                                            <span class="code__text-function-result">function</span> <span class="code__text-function">reverseString</span>(str) {
                                                <span class="code__text-function-result">return</span> (str === <span class="result-color--string">' '</span>) ? <span class="result-color--string">' '</span> : <span class="code__text-function">reverseString</span>(str.<span class="code__text-function">substr</span>(1)) + str.<span class="code__text-function">charAt</span>(0);
                                            }
                                            <span class="code__text-function">reverseString</span>("hello");
                                        h3(class="code__text code__text--heading") Well, are you ready for reversing strings?
                                        
                                    div(class="code__results code__results--methods")
                                        +reverseMethod("first")
                                        +reverseMethod("second")
                                        +reverseMethod("third")

                                    template(id="reverse__template")
                                        li(class="reverse-list__item")
                                            p(class="reverse-list__result-text") <span class="code__text-function">reverseString</span> ("<span class="result__value"></span>") <span class="code__text-function-result">becomes</span> «<span class="result__output"></span>»

                    +challenge("Palindrome", "javascript", "palindrome", "Task", "#JS")
                        block challengePalindrom
                            +code("Check for Palindromes", "palindrome")
                                block codePalindrom
                                    div(class="code__info")
                                        dl(class="")
                                            dt: strong Palindrome
                                            dd is a word, phrase, number, or other sequence of characters which reads the same backward or forward.
                                        p(class="code__text") Well, as you guessed <strong>«Palindrome»</strong> is another one frequently asked JavaScript question at interviews. Interviewers may ask you to check string for palindromes using in-built methods, or without them. Below are my two ways to solve the problem.
                                        div(class="blockquote")
                                            p(class="code__text code__text--heading") Provided test cases:
                                            ul(class="code__content-list")
                                                +palindrome("race car", "true")
                                                +palindrome("not a palindrome", "false")
                                                +palindrome("A man, a plan, a canal. Panama", "true")
                                                +palindrome("never odd or even", "true")
                                                +palindrome("nope", "false")
                                                +palindrome("almostomla", "false")
                                                +palindrome("My age is 0, 0 si ega ym.", "true")
                                                +palindrome("1 eye for of 1 eye.", "false")
                                                +palindrome("0_0 (: /-\ :) 0–0", "true")
                                        ul(class="code-methods")
                                            li(class="code-methods__item")
                                                h3(class="code-methods__heading") 1. Check for Palindromes with built-in functions
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") For this solution, we will use five methods:
                                                    ul(class="code__content-list")
                                                        +method("String", "toLowerCase()")
                                                        +method("String", "replace()")
                                                        +method("String", "split()")
                                                        +method("Array", "reverse()")
                                                        +method("Array", "join()")
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") And the final code is:
                                                    pre(class="code__text"): code.
                                                        <span class="result-color--function">function</span> <span class="result-color--function-name">palindrome</span>(str) {
                                                            <span class="result-color--function">const</span> re = <span class="result-color--string">/[\W_]/g</span>;
                                                            <span class="result-color--function">let</span> lowRegStr = str.<span class="result-color--method">toLowerCase</span>().<span class="result-color--method">replace</span>(re, <span class="result-color--string">' '</span>);
                                                            <span class="result-color--function">let</span> reverseStr = lowRegStr.<span class="result-color--method">split</span>(<span class="result-color--string">' '</span>).<span class="result-color--method">reverse</span>().<span class="result-color--method">join</span>(<span class="result-color--string">' '</span>); 
                                                            <span class="result-color--apex">return</span> reverseStr === lowRegStr;
                                                        }
                                                        <span class="result-color--function-name">palindrome</span>("<span class="result-color--string">hello</span>");
                                            li(class="code-methods__item")
                                                h3(class="code-methods__heading") 2. Check for Palindromes with a <strong>FOR</strong> loop
                                                p(class="code__text") Half-indexing (len/2) has benefits when processing <strong>large</strong>  strings. We check the end from each part and divide the number of iterations inside the <strong>FOR</strong> loop by two.:
                                                pre(class="code__text blockquote"): code.
                                                    <span class="result-color--function">function</span> <span class="result-color--function-name">palindrome</span>(str) {
                                                        <span class="result-color--function">const</span> re = <span class="result-color--string">/[^A-Za-z0-9]/g</span>;
                                                        str = str.<span class="result-color--method">toLowerCase</span>().<span class="result-color--method">replace</span>(re, <span class="result-color--string">' '</span>);
                                                        <span class="result-color--function">let</span> len = str.<span class="result-color--method">length</span>;
                                                        <span class="result-color--apex">for</span> (<span class="result-color--function">let</span> i = 0; i &lt; len / 2; i<span class="result-color--method">++</span>) {
                                                            <span class="result-color--apex">if</span> (str[i] !== str[len - 1 - i]) {
                                                                <span class="result-color--apex">return</span> <span class="result-color--function">false</span>;
                                                            }
                                                        }
                                                        <span class="result-color--apex">return</span> <span class="result-color--function">true</span>;
                                                    }
                                                    <span class="result-color--function-name">palindrome</span>("<span class="result-color--string">hello</span>");
                                        
                                    div(class="code__results code__results--methods")
                                        +palindromeMethod("first", "palindrome")
                                        +palindromeMethod("second", "palindrome")

                                    template(id="template--palindrome")
                                        li(class="code-method__item")
                                            p(class="code-method__result-text") <span class="result-color--function-name">palindrome</span> ("<span class="input-value result-color--string"></span>") function passed the check with result: <span class="output-value result-color--apex"></span>
                         
                    +challenge("FizzBuzz", "javascript", "fizzbuzz", "Task", "#JS")
                        block challengeFizzBuzz
                            +code("FizzBuzz", "fizzbuzz")
                                block codeFizzBuzz
                                    div(class="code__info") 
                                        p(class="code__text") <strong>The «FizzBuzz test»</strong> is an interview question designed to help filter out the 99.5% of programming job candidates which couldn't handle this task. The text of the programming assignment is as follows:
                                        blockquote(class="blockquote") "Write a program that prints the numbers from 1 to 100. But for multiples of three print «Fizz» instead of the number and for the multiples of five print «Buzz». For numbers which are multiples of both three and five print «FizzBuzz»." <footer><cite>&copy; Some tech specialist at interview</cite></footer>
                                        p(class="code__text") I think FizzBuzz is «hard» for some programmers because (#1) it doesn't fit into any of the patterns that were given to them in school assignments, and (#2) it isn't possible to directly and simply represent the necessary tests, without duplication, in just about any commonly-used modern programming language.
                                        p(class="code__text") On #1, that it doesn't match the patterns they memorized from lectures and class assignments: I think this makes it a good discriminator, because employer wishes to hire candidates who can think for themselves -- not those who are limited to copying solutions from others.
                                        p(class="code__text") On #2, it's difficult to code directly: <strong>FizzBuzz</strong> doesn't fit any common pattern of
                                        p(class="blockquote blockquote--center")
                                            code if 1 then A 
                                                <br> else if 2 then B
                                                <br> else if 3 then C
                                                <br> else/otherwise D
                                        p(class="code__text") Maybe there's no simple and satisfying solution to the code structuring issue, but let me introduce my own solution in JavaScript. You can choose <strong>«Fizz»</strong> and <strong>«Buzz»</strong> numbers manualy.

                                    div(class="code__form")
                                        p(class="code__row code__row--grid")
                                            label(class="code__label" for="inputFizz") Enter «Fizz» number:
                                            input(class="code__input code__input--fizz" id="inputFizz" type="number" name="fizz" value="3" min="1" max="100" autocomplete="off")
                                            
                                        p(class="code__row code__row--grid")
                                            label(class="code__label" for="inputBuzz") Enter «Buzz» number:
                                            input(class="code__input code__input--buzz" id="inputBuzz" type="number" name="buzz" value="5" min="1" max="100" autocomplete="off")
                                        p(class="code__row")
                                            button(class="button-fizzbuzz" type="button" aria-label="Click me if you are ready to start the code") FizzBuzz it!

                                    div(class="code__result result")
                                        div(class="result__grid")

                    +challenge("Canvas Clock", "javascript", "clocks", "Course project", "#JS")
                        block challengeClocks
                            +code("Canvas Clock", "clocks")
                                block codeClocks
                                    div(class="code__info")
                                        p(class="code__text") The «<strong>Canvas Clock</strong>» is course project designed to help students to gain expierence with canvas <abbr title="application programming interface">API</abbr>. <code class="code-container"> &lt;canvas&gt; </code> is an HTML element which can be used to draw graphics via scripting. For instance, it can be used to draw graphs, combine photos, create different animations. On this page the «clock» shows the example of <code class="code-container"> &lt;canvas&gt; </code> implementation which I learned at courses. 
                                    div(class="code__content") 
                                        canvas(id="clock" width="300px" height="300px" aria-label="Clock built with canvas JS.") Please upgrade your browser. 
                    
                    +challenge("Canvas Ball", "javascript", "canvas challenge--canvas-ball", "Course project", "#JS")
                        block challengeBall
                            +code("Canvas Ball", "canvas-ball")
                                block codeBall
                                    div(class="code__info")
                                        p(class="code__text") <strong>The «Canvas Ball»</strong> is course project designed to help students to gain expierence with canvas <abbr title="application programming interface">API</abbr>. <code class="code-container"> &lt;canvas&gt; </code> is an HTML element which can be used to draw graphics via scripting. For instance, it can be used to draw graphs, combine photos, create different animations. On this page the bouncing ball animation shows the example of <code class="code-container"> &lt;canvas&gt; </code> implementation which I learned at courses. 
                                    div(class="code__content code__content--canvas-ball")

                    +challenge("Canvas Wizard", "javascript", "canvas challenge--canvas-wizard", "Course project", "#JS")
                        block challengeWizard
                            +code("Canvas Wizard", "canvas-wizard")
                                block codeWizard
                                    div(class="code__info")
                                        p(class="code__text") The «<strong>Canvas Wizard</strong>» is course project designed to help students to gain expierence with canvas <abbr title="application programming interface">API</abbr>. <code class="code-container"> &lt;canvas&gt; </code> is an HTML element which can be used to draw graphics via scripting. For instance, it can be used to draw graphs, combine photos, create different animations. In this challenge you are allowed to control the wizards' movements inside restricted area. For now you can move the Wizard <strong>only from desktop</strong>.
                                    div(class="code__content code__content--canvas-wizard")

                    +challenge("Social Media Buttons", "animations", "social-buttons", "Inspiration", "#CSS")
                        block challengeSocials
                            +code("Social Media Buttons", "social-buttons")
                                block codeSocials
                                    div(class="code__info") 
                                        p(class="code__text") «<strong>CSS Inspiration</strong>» is a mini cycle of challenges, in which I'll create various design elements of the user interface. Examples include original animations, unusual transformations, creative elements and etc. All elements can be used for inspiration and modified by yourself. We constantly faced with social media elements on websites and apps, so I decided to create this challenge. The «<strong>Social Media Buttons</strong>» is a set of various hover effects in different design patterns that implemented on a list of social media links. 
                                    div(class="code__content code__content--social-buttons")
                                        ul(class="social-buttons__list" data-text="Colored design")
                                            +socialButton("facebook", "facebook")
                                            +socialButton("twitter", "twitter")
                                            +socialButton("youtube", "youtube")
                                            +socialButton("vk", "vk")
                                            +socialButton("instagram", "instagram")
                                            +socialButton("telegram", "telegram")
                                            +socialButton("github", "github")
                                            +socialButton("linkedin", "linkedin")
                                            +socialButton("behance", "behance")

                    
                    
                    //- +challenge("Canvas Wizard", "javascript", "canvas challenge--canvas-wizard", "Course project", "#JS")
                    //-     block challengeWizard
                    //-         +code("Canvas Wizard", "canvas-wizard")
                    //-             block codeWizard
                    //- +challenge("Canvas Wizard", "javascript", "canvas challenge--canvas-wizard", "Course project", "#JS")
                    //-     block challengeWizard
                    //-         +code("Canvas Wizard", "canvas-wizard")
                    //-             block codeWizard


block scripts
    script(src="scripts/scripts.min.js")